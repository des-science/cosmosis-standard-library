[runtime]
; The emcee sampler, which uses the Goodman & Weare algorithm
sampler = test
root = ${PWD}

[emcee]
; The emcee sampler uses the concept of walkers, a collection
; of live points.  Sampling is done along lines that connect
; pairs of walkers.  The number of walkers must be at least
; 2*nparam + 1, but in general more than that usually works
; better.
walkers = 32
; This many samples is overkill, just to make the plots
; look a lot nicer
samples = 300
; This is the interval at which convergence diagnostics
; are performed
nsteps = 10



[output]
filename = output/desy6bao.txt
format = text
verbosity = debug

[pipeline]
; We use two likelihoods, the JLA (for high redshift) and
; Riess 2011 to anchor H0, which is otherwise degenerate
; with the nuisance parameter M
modules = consistency camb desy6bao pantheon
values = /projects/fiat.lux/sjlee/workspace/cosmosis2/cosmosis-standard-library/likelihood/desy6bao/value.ini
extra_output =
quiet=F
debug=F
timing=F



[camb]
; For background-only data we do not need a full
; Boltzmann evaluation, just D(z), etc.
; Setting mode=background means we get this.
file = boltzmann/camb/camb_interface.py
mode = background
feedback = 0

; We need quite fine redshift spacing, because the supernovae
; go down to low z where things are pretty sensitive
nz_background = 200
zmin_background = 0.0
zmax_background = 2.0

[pantheon]
file = likelihood/pantheon/pantheon.py

; The Riess 11 likelihood anchors H0 for us
[riess21]
file = likelihood/riess21/riess21.py

; The consistency module translates between our chosen parameterization
; and any other that modules in the pipeline may want (e.g. camb)
[consistency]
file = utility/consistency/consistency_interface.py

[desy6bao]
file = likelihood/desy6bao/desy6bao.py
feedback=1